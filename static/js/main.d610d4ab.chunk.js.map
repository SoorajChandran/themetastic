{"version":3,"sources":["theme.ts","ThemeContext.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["COLORS","themeLight","background","body","themeDark","getTheme","mode","ThemeContext","createContext","isDark","toggleTheme","Wrapper","styled","props","theme","Title","h1","ToggleButton","button","App","themeState","React","useContext","data-testid","onClick","Boolean","window","location","hostname","match","ReactDOM","render","children","useState","hasThemeMounted","setThemeState","useEffect","localStorage","getItem","useDarkMode","Provider","value","setItem","JSON","stringify","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAEMA,EAEG,OAIHC,EAAa,CACjBC,WAJM,UAKNC,KAAMH,GAGFI,EAAY,CAChBF,WAAYF,EACZG,KAZO,WAiBME,EAFE,SAACC,GAAD,MAAoC,SAATA,EAAkBF,EAAYH,GCNpEM,EAAeC,wBALgB,CACnCC,QAAQ,EACRC,YAAa,e,icCEf,IAAMC,EAAeC,YAAsB,MAAtBA,CAAH,KACF,SAAAC,GAAK,OAAKA,EAAMC,MAAcZ,cAKjC,SAAAW,GAAK,OAAKA,EAAMC,MAAcX,QAIrCY,EAAQH,IAAOI,GAAV,KAILC,EAAeL,IAAOM,OAAV,KAwBHC,EAfH,WACV,IAAMC,EDtBeC,IAAMC,WAAWf,GCwBtC,OACE,kBAACI,EAAD,KACE,6BACE,kBAACI,EAAD,gCACA,kBAACE,EAAD,CAAcM,cAAY,gBAAgBC,QAAS,kBAAMJ,EAAWV,gBACjEU,EAAWX,OAAS,eAAO,mBC9BlBgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,mBHwBoB,SAAC,GAAiD,IAA/CC,EAA8C,EAA9CA,SAA8C,EAdnD,WAAqE,IAAD,EAClDC,mBAAoB,CACtDxB,QAAQ,EACRyB,iBAAiB,IAHmE,mBAC/Ed,EAD+E,KACnEe,EADmE,KAWtF,OALAC,qBAAU,WACR,IAAM3B,EAA4C,SAAnC4B,aAAaC,QAAQ,UACpCH,EAAc,eAAKf,EAAN,CAAkBX,SAAQyB,iBAAiB,OACvD,IAEI,CAACd,EAAYe,GAIgBI,GADiC,mBAC9DnB,EAD8D,KAClDe,EADkD,KAGrE,IAAKf,EAAWc,gBACd,OAAO,8BAMT,IAMMpB,EAAQM,EAAWX,OAASJ,EAAS,QAAUA,EAAS,SAE9D,OACE,kBAAC,IAAD,CAAsBS,MAAOA,GAC3B,kBAACP,EAAaiC,SAAd,CACEC,MAAO,CACLhC,OAAQW,EAAWX,OACnBC,YAbY,WAClB,IAAMD,GAAUW,EAAWX,OAC3B4B,aAAaK,QAAQ,SAAUC,KAAKC,UAAUnC,IAC9C0B,EAAc,eAAKf,EAAN,CAAkBX,eAa1BuB,MGlDP,KACE,kBAAC,EAAD,OAEFa,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d610d4ab.chunk.js","sourcesContent":["import { ITheme } from './types'\n\nconst COLORS = {\n  white: '#FFFFFF',\n  black: '#444',\n  gray: '#F8F8F9',\n}\n\nconst themeLight = {\n  background: COLORS.gray,\n  body: COLORS.black,\n}\n\nconst themeDark = {\n  background: COLORS.black,\n  body: COLORS.white,\n}\n\nconst getTheme = (mode: string): ITheme => (mode === 'dark' ? themeDark : themeLight)\n\nexport default getTheme\n","import React from 'react'\nimport { createContext, useState, useEffect } from 'react'\nimport { ThemeProvider as EmotionThemeProvider } from 'emotion-theming'\nimport getTheme from './theme'\n\nimport { IContext, ThemeType } from './types'\n\nconst defaultContextData: IContext = {\n  isDark: false,\n  toggleTheme: () => {},\n}\n\nconst ThemeContext = createContext<IContext>(defaultContextData)\nconst useTheme = () => React.useContext(ThemeContext)\n\n/**\n * A custom hook to check the local storage and update the states with the current theme\n */\nconst useDarkMode = (): [ThemeType, React.Dispatch<React.SetStateAction<ThemeType>>] => {\n  const [themeState, setThemeState] = useState<ThemeType>({\n    isDark: false,\n    hasThemeMounted: false,\n  })\n\n  useEffect(() => {\n    const isDark = localStorage.getItem('isDark') === 'true'\n    setThemeState({ ...themeState, isDark, hasThemeMounted: true })\n  }, [])\n\n  return [themeState, setThemeState]\n}\n\nconst ThemeProvider = ({ children }: { children: React.ReactNode }) => {\n  const [themeState, setThemeState] = useDarkMode()\n\n  if (!themeState.hasThemeMounted) {\n    return <div />\n  }\n\n  /**\n   * Switches the current theme and updates the local storage and state. DUH!\n   */\n  const toggleTheme = () => {\n    const isDark = !themeState.isDark\n    localStorage.setItem('isDark', JSON.stringify(isDark))\n    setThemeState({ ...themeState, isDark })\n  }\n\n  const theme = themeState.isDark ? getTheme('dark') : getTheme('light')\n\n  return (\n    <EmotionThemeProvider theme={theme}>\n      <ThemeContext.Provider\n        value={{\n          isDark: themeState.isDark,\n          toggleTheme,\n        }}\n      >\n        {children}\n      </ThemeContext.Provider>\n    </EmotionThemeProvider>\n  )\n}\n\nexport { ThemeProvider, useTheme }\n","import React from 'react'\nimport styled from '@emotion/styled'\nimport { useTheme } from './ThemeContext'\nimport { ITheme } from './types'\n\n/**\n * the any types here are because of\n * /** https://github.com/emotion-js/emotion/issues/1320\n * TODO: Fix this with work arounds mentioned in the issue\n */\n\nconst Wrapper: any = styled<'div', ITheme>('div')`\n  background: ${props => (props.theme as any).background};\n  width: 100vw;\n  text-align: center;\n  height: 100vh;\n  h1 {\n    color: ${props => (props.theme as any).body};\n  }\n`\n\nconst Title = styled.h1`\n  margin: 0;\n`\n\nconst ToggleButton = styled.button`\n  margin: 0;\n  border: 0;\n  font-size: 80px;\n  background: transparent;\n  outline: none;\n  cursor: pointer;\n`\n\nconst App = () => {\n  const themeState = useTheme()\n\n  return (\n    <Wrapper>\n      <div>\n        <Title>Click on the icon below</Title>\n        <ToggleButton data-testid=\"toggle-button\" onClick={() => themeState.toggleTheme()}>\n          {themeState.isDark ? '‚òÄÔ∏è' : 'üåë'}\n        </ToggleButton>\n      </div>\n    </Wrapper>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { ThemeProvider } from './ThemeContext'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <ThemeProvider>\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}